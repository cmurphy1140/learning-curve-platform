// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User model for authentication (future feature)
model User {
  id        String   @id @default(cuid())
  email     String?  @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  sessions      StudySession[]
  progress      Progress?
  achievements  Achievement[]
}

// Study session tracking
model StudySession {
  id               String   @id @default(cuid())
  userId           String?
  date             DateTime @default(now())
  duration         Int      // Duration in minutes
  modulesCompleted String   @default("[]") // JSON array of module IDs
  xpGained         Int      @default(0)
  technology       String   // javascript, react, nextjs, typescript
  createdAt        DateTime @default(now())
  
  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([date])
}

// User progress tracking
model Progress {
  id                String   @id @default(cuid())
  userId            String   @unique
  level             Int      @default(1)
  experience        Int      @default(0)
  completedModules  String   @default("[]") // JSON array of completed module IDs
  currentStreak     Int      @default(0)
  longestStreak     Int      @default(0)
  lastActiveDate    DateTime @default(now())
  totalStudyTime    Int      @default(0) // Total time in minutes
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Achievement tracking
model Achievement {
  id          String   @id @default(cuid())
  userId      String
  type        String   // streak, modules, xp, time
  name        String
  description String
  icon        String
  earnedAt    DateTime @default(now())
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

// Module completion tracking
model ModuleCompletion {
  id          String   @id @default(cuid())
  userId      String?
  moduleId    String
  technology  String   // javascript, react, nextjs
  completedAt DateTime @default(now())
  timeSpent   Int      @default(0) // Time in minutes
  score       Int?     // Quiz score if applicable
  
  @@unique([userId, moduleId])
  @@index([userId])
  @@index([moduleId])
}
